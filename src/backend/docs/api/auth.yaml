openapi: 3.0.3
info:
  title: Mint Clone Authentication API
  description: Authentication service API specification for user registration, login, MFA, and session management
  version: 1.0.0
  contact:
    name: Development Team
    email: dev@mintclone.com

servers:
  - url: /api/v1
    description: Production API server
  - url: /api/v1/dev
    description: Development API server

tags:
  - name: Authentication
    description: Core authentication endpoints
  - name: MFA
    description: Multi-factor authentication endpoints
  - name: Session
    description: Session management endpoints

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account with email verification
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify email address
      description: Verify user's email address with token
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Email verification token
              required:
                - token
      responses:
        '200':
          description: Email verified successfully
        '400':
          $ref: '#/components/responses/ValidationError'
        '410':
          description: Verification token expired

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '202':
          description: MFA verification required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFARequiredResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Invalid credentials
        '403':
          description: Email not verified

  /auth/mfa/setup:
    post:
      tags:
        - MFA
      summary: Setup MFA
      description: Configure multi-factor authentication
      operationId: setupMFA
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFASetupRequest'
      responses:
        '200':
          description: MFA setup successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFASetupResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/mfa/verify:
    post:
      tags:
        - MFA
      summary: Verify MFA code
      description: Verify MFA code during login or sensitive operations
      operationId: verifyMFA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAVerifyRequest'
      responses:
        '200':
          description: MFA verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Invalid MFA code

  /auth/refresh:
    post:
      tags:
        - Session
      summary: Refresh access token
      description: Get new access token using refresh token
      operationId: refreshToken
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Session
      summary: User logout
      description: Invalidate current session
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  schemas:
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          minLength: 8
          description: Password meeting complexity requirements
        confirmPassword:
          type: string
          description: Password confirmation
      required:
        - email
        - password
        - confirmPassword

    RegisterResponse:
      type: object
      properties:
        id:
          type: string
          description: User ID
        email:
          type: string
          format: email
        message:
          type: string
          example: "Registration successful. Please verify your email."

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserProfile'
        tokens:
          $ref: '#/components/schemas/AuthTokens'

    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token
        expiresIn:
          type: integer
          description: Token expiration time in seconds
        tokenType:
          type: string
          example: "Bearer"
      required:
        - accessToken
        - refreshToken
        - expiresIn
        - tokenType

    UserProfile:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        mfaEnabled:
          type: boolean
        lastLogin:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    MFASetupRequest:
      type: object
      properties:
        type:
          type: string
          enum: [authenticator, sms]
        phoneNumber:
          type: string
          description: Required for SMS MFA
      required:
        - type

    MFASetupResponse:
      type: object
      properties:
        secret:
          type: string
          description: TOTP secret for authenticator
        qrCode:
          type: string
          description: QR code URL for authenticator setup
        backupCodes:
          type: array
          items:
            type: string
          description: Backup codes for account recovery

    MFAVerifyRequest:
      type: object
      properties:
        code:
          type: string
          description: MFA verification code
        method:
          type: string
          enum: [authenticator, sms, email]
      required:
        - code
        - method

    MFARequiredResponse:
      type: object
      properties:
        mfaRequired:
          type: boolean
          example: true
        methods:
          type: array
          items:
            type: string
            enum: [authenticator, sms, email]

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time
        path:
          type: string

  responses:
    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key

security:
  - apiKey: []