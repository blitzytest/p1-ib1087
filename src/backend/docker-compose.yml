version: "3.9"
name: mint-clone

services:
  # API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - RATE_LIMIT=100
      - TIMEOUT=30000
      - REDIS_URL=redis://redis:6379
    depends_on:
      - auth-service
      - account-service
      - transaction-service
      - budget-service
      - investment-service
      - redis
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "2G"
      restart_policy:
        condition: on-failure
        max_attempts: 3
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Auth Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://mongodb:27017/auth
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Transaction Service
  transaction-service:
    build:
      context: ./transaction-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3002
      - POSTGRES_URL=postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/transactions
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "2G"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Account Service
  account-service:
    build:
      context: ./account-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3003
      - POSTGRES_URL=postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/accounts
      - PLAID_ENV=production
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Budget Service
  budget-service:
    build:
      context: ./budget-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3004
      - POSTGRES_URL=postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/budgets
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Investment Service
  investment-service:
    build:
      context: ./investment-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3005
      - POSTGRES_URL=postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/investments
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=mintclone
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "4G"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "2G"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local

networks:
  backend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      encrypted: "true"