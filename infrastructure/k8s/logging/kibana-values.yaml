# Kibana Helm Values Configuration for Mint Clone Application
# Version: 8.0.0
# Purpose: Production deployment configuration for visualization and log analysis

# Replica Configuration
replicas: 2

# Container Image Configuration
image:
  repository: docker.elastic.co/kibana/kibana
  tag: "8.0.0"
  pullPolicy: IfNotPresent

# Resource Allocation
resources:
  requests:
    cpu: "500m"
    memory: "1Gi"
  limits:
    cpu: "1000m"
    memory: "2Gi"

# Elasticsearch Connection
elasticsearchHosts: "http://elasticsearch-master:9200"

# Kibana Configuration
kibanaConfig:
  kibana.yml:
    server.name: "mint-clone-kibana"
    server.host: "0.0.0.0"
    elasticsearch.hosts: ["${ELASTICSEARCH_HOSTS}"]
    elasticsearch.username: "${ELASTICSEARCH_USERNAME}"
    elasticsearch.password: "${ELASTICSEARCH_PASSWORD}"
    
    # Security Configuration
    xpack.security.enabled: true
    xpack.security.encryptionKey: "${ENCRYPTION_KEY}"
    
    # Monitoring Configuration
    xpack.monitoring.enabled: true
    logging.root.level: "info"
    
    # Reporting Configuration
    xpack.reporting.enabled: true
    xpack.reporting.capture.timeouts.waitForElements: 30000
    xpack.reporting.csv.maxSizeBytes: 10485760
    xpack.reporting.roles.enabled: true

# Persistent Storage Configuration
persistence:
  enabled: true
  storageClass: "gp2"
  accessModes: ["ReadWriteOnce"]
  size: "10Gi"
  annotations:
    backup.velero.io/backup-volumes: "kibana-data"

# Service Configuration
service:
  type: ClusterIP
  port: 5601
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5601"

# Ingress Configuration
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - "kibana.mint-clone.internal"
  tls:
    - secretName: "kibana-tls"
      hosts:
        - "kibana.mint-clone.internal"

# Security Context
securityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsNonRoot: true

# Update Strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1

# Metrics Configuration
metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: "30s"
    scrapeTimeout: "10s"
    namespace: "monitoring"

# Health Checks
readinessProbe:
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 3

livenessProbe:
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 3

# Pod Anti-Affinity
podAntiAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
            - key: "app"
              operator: "In"
              values: ["kibana"]
        topologyKey: "kubernetes.io/hostname"